aggregate
使用聚合管道对集合中的文档进行组合
表的关联查询和统计

表达式	描述	                                实例
$sum	计算总和。	                        db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : "$likes"}}}])
$avg	计算平均值	                        db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$avg : "$likes"}}}])
$min	获取集合中所有文档对应值得最小值。	    db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$min : "$likes"}}}])
$max	获取集合中所有文档对应值得最大值。	    db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$max : "$likes"}}}])
$push	在结果文档中插入值到一个数组中。	        db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}])
$addToSet	在结果文档中插入值到一个数组中，但不创建副本。	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}])
$first	根据资源文档的排序获取第一个文档数据。	    db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}])
$last	根据资源文档的排序获取最后一个文档数据	    db.mycol.aggregate([{$group : {_id : "$by_user", last_url : {$last : "$url"}}}])


管道的概念
管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。

MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。

表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。

这里我们介绍一下聚合框架中常用的几个操作：

$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。
$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。
$limit：用来限制MongoDB聚合管道返回的文档数。
$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。
$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。
$group：将集合中的文档分组，可用于统计结果。
$sort：将输入文档排序后输出。
$geoNear：输出接近某一地理位置的有序文档。


实践：
//$project 只显示username gender
db.admin.aggregate([{$project:{username:1,gender:1}}])

//$match
db.admin.aggregate([
{$project:{username:1,gender:1}},
{$match:{age:{$gt:50}}}
])

//$group 统计男生女生的人数  注意引号
> db.admin.aggregate([{$group:{_id:'$gender',total:{$sum:1}}}])
{ "_id" : "female", "total" : 50 }
{ "_id" : "male", "total" : 50 }

//$sort  降序排列
db.admin.aggregate([
{$project:{username:1,age:1}},
{$match:{age:{$gt:50}}},
{$sort:{age:-1}}
])

//$limit $skip


//$lookup 表关联

